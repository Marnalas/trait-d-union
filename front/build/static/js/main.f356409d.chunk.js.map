{"version":3,"sources":["components/NavBar.js","react-auth0-spa.js","components/Profile.js","components/PrivateRoute.js","components/common/Breadcrumb.js","components/PostOffre.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","src","alt","style","display","to","type","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Profile","loading","user","picture","name","email","JSON","stringify","PrivateRoute","Component","component","path","rest","isAuthenticated","loginWithRedirect","useEffect","a","appState","targetUrl","fn","render","props","Breadcrumb","this","aria-label","aria-current","pageDescription","Alert","withReactContent","Swal","PostOffre","useForm","register","handleSubmit","errors","reset","onSubmit","formData","axios","post","fire","icon","confirmButtonText","footer","console","log","Fragment","autoFocus","placeholder","required","ref","pattern","App","exact","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","logout","domain","config","client_id","clientId","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f356409d.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst NavBar = () => {\n\n  return (\n    <header className=\"header-2\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"header-top\">\n              <div className=\"logo-area\">\n                <a href=\"index.html\"><img src=\"/logo.png\" alt=\"logo rÃ©gion grand est \" /></a>\n              </div>\n              <div className=\"header-top-toggler\">\n                <div className=\"header-top-toggler-button\" />\n              </div>\n              <div className=\"top-nav\" style={{ display: 'flex' }}>\n                <Link to=\"/poster-offre\">\n                  <button type=\"button\" className=\"btn btn-primary btn-lg\">\n                    <i className=\"fas fa-plus\"/> Poster une offre d'immersion\n                      </button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n\nexport default NavBar\n","// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","// src/components/Profile.js\n\nimport React, { Fragment } from 'react'\nimport { useAuth0 } from '../react-auth0-spa'\n\nconst Profile = () => {\n  const { loading, user } = useAuth0()\n\n  if (loading || !user) {\n    return (\n      <div>Loading...</div>\n    )\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\"/>\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  )\n}\n\nexport default Profile\n","// src/components/PrivateRoute.js\n\nimport React, { useEffect } from 'react'\nimport { Route } from 'react-router-dom'\nimport { useAuth0 } from '../react-auth0-spa'\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0()\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      })\n    }\n    fn()\n  }, [loading, isAuthenticated, loginWithRedirect, path])\n\n  const render = props => isAuthenticated === true ? <Component {...props} /> : null\n\n  return <Route path={path} render={render} {...rest} />\n}\n\nexport default PrivateRoute\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Breadcrumb extends React.Component {\n  render () {\n    return (\n      <div className=\"alice-bg padding-top-70 padding-bottom-70\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"breadcrumb-area\">\n                <h1>{this.props.title}</h1>\n                <nav aria-label=\"breadcrumb\">\n                  <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\">\n                      <Link to=\"/\">\n                        Accueil\n                      </Link>\n                    </li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">{this.props.pageDescription}</li>\n                  </ol>\n                </nav>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Breadcrumb\n","import React from 'react'\nimport Breadcrumb from './common/Breadcrumb'\nimport useForm from 'react-hook-form'\nimport axios from 'axios'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst Alert = withReactContent(Swal)\n\nconst PostOffre = () => {\n  const { register, handleSubmit, errors, reset } = useForm()\n  const onSubmit = async formData => {\n    try {\n      await axios.post('/api/v1/offres', formData)\n      await Alert.fire({\n        icon: 'success',\n        title: 'FÃ©licitations ! Votre offre a bien Ã©tÃ© crÃ©Ã©e et va Ãªtre diffusÃ©e largement !',\n        confirmButtonText: 'Poster une nouvelle offre'\n      })\n      reset()\n    } catch (e) {\n      await Alert.fire({\n        icon: 'error',\n        title: 'Oh non ! Une erreur s\\'est produite. Merci de rÃ©essayer ultÃ©rieurement.',\n        confirmButtonText: 'OK',\n        footer: '<a href=\"mailto:contact@traitdunion.beta.gouv.fr\">Nous contacter</a>'\n      })\n    }\n  }\n  console.log(errors)\n\n  return (\n    <React.Fragment>\n      <Breadcrumb title=\"Poster une offre\" pageDescription=\"Poster une offre d'immersion (PMSMP)\"/>\n      <div className=\"alice-bg section-padding-bottom\">\n        <div className=\"container no-gliters\">\n          <div className=\"row no-gliters\">\n            <div className=\"col\">\n              <div className=\"dashboard-container\">\n                <div className=\"dashboard-content-wrapper\">\n                  <form onSubmit={handleSubmit(onSubmit)} className=\"dashboard-form job-post-form\">\n                    <div className=\"dashboard-section basic-info-input\">\n                      <h4>\n                        Faire dÃ©couvrir un mÃ©tier grÃ¢ce Ã  une offre d'immersion (PMSMP)\n                      </h4>\n                      <div className=\"form-group row\">\n                        <label className=\"col-md-3 col-form-label\">Quel mÃ©tier souhaitez-vous faire dÃ©couvrir ?</label>\n                        <div className=\"col-md-9\">\n                          <input autoFocus\n                                 type=\"text\"\n                                 name=\"jobTitle\"\n                                 className=\"form-control\"\n                                 placeholder=\"IntitulÃ© du mÃ©tier que vous souhaitez faire dÃ©couvrir\"\n                                 required=\"required\"\n                                 ref={register({ required: 'Ce champ est obligatoire' })}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"form-group row\">\n                        <label className=\"col-md-3 col-form-label\">OÃ¹ se trouve l'immersion ?</label>\n                        <div className=\"col-md-9\">\n                          <input type=\"text\"\n                                 name=\"address\"\n                                 className=\"form-control\"\n                                 placeholder=\"Lieu de l'immersion (Code Postal a minima)\"\n                                 required=\"required\"\n                                 ref={register({ required: true })}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"form-group row\">\n                        <label className=\"col-md-3 col-form-label\">Ã quelle adresse email pouvons-nous vous joindre ?</label>\n                        <div className=\"col-md-9\">\n                          <input type=\"text\"\n                                 className=\"form-control\"\n                                 name=\"email\"\n                                 placeholder=\"Votre adresse email\"\n                                 required=\"required\"\n                                 ref={register({ required: true, pattern: /^\\S+@\\S+$/i })}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-group row\">\n                      <label className=\"col-md-3 col-form-label\"/>\n                      <div className=\"col-md-9\">\n                        <button className=\"button\" type=\"submit\">Poster votre offre</button>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default PostOffre\n","// src/App.js\nimport './App.scss'\nimport React from 'react'\nimport NavBar from './components/NavBar'\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Profile from './components/Profile'\nimport PrivateRoute from './components/PrivateRoute'\nimport PostOffre from './components/PostOffre'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <header>\n          <NavBar/>\n        </header>\n        <Switch>\n          <Route path=\"/\" exact/>\n          <Route path=\"/poster-offre\" exact>\n            <PostOffre />\n          </Route>\n          <PrivateRoute path=\"/profile\" component={Profile}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}